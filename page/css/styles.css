@charset "UTF-8";
/* 
 * Compass - Import
 */
/*
 * Global mixins
 */
/*
 * Striped (diagonal) backgrounds
 * 
 * $bg-color
 * $darken-amount
 * $bg-size
 * $stripe-color
 */
/**
 * Simple handler for breakpoints. 
 *
 * small: Smartphones
 * medium: Tablets
 * large: Desktop and TV's
 */
/**
 * inuit.css - Setup
 */
/*------------------------------------*\
    $VARS
\*------------------------------------*/
/**
 * Set up project-specific variables here which are then used throughout your
 * build. These variables are automatically picked up by inuit.css so you should
 * never need to modify any framework code.
 */
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/**
 * Would you like to use Adam Whitcroft’s Batch icon font, as per:
 * adamwhitcroft.com/batch ?
 */
/**
 * Base stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/**
 * Responsiveness?
 */
/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: $responsive parameter above must be enabled before enabling this.
 */
/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */
/**
 * English quote marks?
 */
/**
 * If you want English quotes then please do not edit these; they’re only here
 * because Sass needs them.
 */
/**
 * If you need non-English quotes, please alter the following values ac cordingly:
 */
/**
 * inuit.css will work these next ones out for you.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/*------------------------------------*\
    INUIT.CSS
\*------------------------------------*/
/**
 *
 * inuitcss.com -- @inuitcss -- @csswizardry
 *
 */
/**
 * inuit.css acts as a base stylesheet which you should extend with your own
 * theme stylesheet.
 *
 * inuit.css aims to do the heavy lifting; sorting objects and abstractions,
 * design patterns and fiddly bits of CSS, whilst leaving as much design as
 * possible to you. inuit.css is the scaffolding to your decorator.
 *
 * This stylesheet is heavily documented and contains lots of comments, please
 * take care to read and refer to them as you build. For further support please
 * tweet at @inuitcss.
 *
 * Owing to the amount of comments please only ever use minified CSS in
 * production. This file is purely a dev document.
 *
 * The table of contents below maps to section titles of the same name, to jump
 * to any section simply run a find for $[SECTION-TITLE].
 *
 * Most objects and abstractions come with a chunk of markup that you should be
 * able to paste into any view to quickly see how the CSS works in conjunction
 * with the correct HTML.
 *
 * inuit.css is written to this standard: github.com/csswizardry/CSS-Guidelines
 *
 * LICENSE
 *
 * Copyright 2012 Harry Roberts
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Thank you for choosing inuit.css. May your floats remain cleared.
 */
/*------------------------------------*\
    $CONTENTS
\*------------------------------------*/
/**
 * CONTENTS............You’re reading it!
 * WARNING.............Here be dragons!
 * IMPORTS.............Begin importing the sections below
 *
 * MIXINS..............Super-simple Sass stuff
 * NORMALIZE...........normalize.css
 * RESET...............Set some defaults
 * CLEARFIX............
 * SHARED..............Shared declarations
 *
 * MAIN................High-level elements like `html`, `body`, etc.
 * HEADINGS............Double-stranded heading hierarchy
 * PARAGRAPHS..........
 * SMALLPRINT..........Smaller text elements like `small`
 * QUOTES..............
 * CODE................
 * LINKS...............
 * LISTS...............
 * IMAGES..............
 * TABLES..............
 * FORMS...............
 *
 * GRIDS...............Fluid, proportional and nestable grids
 * FLEXBOX.............Crudely emulate flexbox
 * COLUMNS.............CSS3 columns
 * NAV.................A simple abstraction to put a list in horizontal nav mode
 * OPTIONS.............Grouped nav items
 * PAGINATION..........Very stripped back, basic paginator
 * BREADCRUMB..........Simple breadcrumb trail object
 * MEDIA...............Media object
 * MARGINALIA..........Simple marginalia content
 * ISLAND..............Boxed off content
 * BLOCK-LIST..........Blocky lists of content
 * MATRIX..............Gridded lists
 * SPLIT...............A simple split-in-two object
 * THIS-OR-THIS........Options object
 * LINK-COMPLEX........
 * FLYOUT..............Flyout-on-hover object
 * ARROWS..............CSS arrows
 * SPRITE..............Generic spriting element
 * ICON-TEXT...........Icon and text couplings
 * BUTTONS.............
 * LOZENGES............Basic lozenge styles
 * RULES...............Horizontal rules
 * STATS...............Simple stats object
 * GREYBOX.............Wireframing styles
 * BATCH...............Batch icon font
 *
 * WIDTHS..............Width classes for use alongside the grid system etc.
 * PUSH................Push classes for manipulating grids
 * PULL................Pull classes for manipulating grids
 * BRAND...............Helper class to apply brand treatment to elements
 * HELPER..............A series of helper classes to use arbitrarily
 * DEBUG...............Enable to add visual flags for debugging purposes
 */
/*------------------------------------*\
    $WARNING
\*------------------------------------*/
/*
 * inuit.css, being an OO framework, works in keeping with the open/closed
 * principle. The variables you set previously are now being used throughout
 * inuit.css to style everything we need for a base. Any custom styles SHOULD
 * NOT be added or modified in inuit.css directly, but added via your theme
 * stylesheet as per the open/closed principle:
 *
 * csswizardry.com/2012/06/the-open-closed-principle-applied-to-css
 *
 * Try not to edit any CSS beyond this point; if you find you need to do so
 * it is a failing of the framework so please tweet at @inuitcss.
 */
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/**
 * Generic utility styles etc.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/* normalize.css v2.1.0 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/*
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/*
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block;
}

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */
/*
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */
}

/*
 * Remove default margin.
 */
body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */
/*
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}

/*
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */
/*
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/*
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/*
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/*
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/*
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/*
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}

/*
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap;
}

/*
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019";
}

/*
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/*
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */
/*
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}

/*
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */
/*
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */
/*
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
}

/*
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}

/*
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/*
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/*
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box;
}

/*
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/*
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */
/*
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*------------------------------------*\
    $RESET
\*------------------------------------*/
/**
 * A more considered reset; more of a restart...
 * As per: csswizardry.com/2011/10/reset-restarted
 */
/**
* Let’s make the box model all nice, shall we…?
*/
*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
}

/**
 * The usual...
 */
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0;
}

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title], dfn[title] {
  cursor: help;
}

/**
 * Remove underlines from potentially troublesome elements.
 */
a, u, ins {
  text-decoration: none;
}

/**
 * Apply faux underline via `border-bottom`.
 */
ins {
  border-bottom: 1px solid;
}

/**
 * So that `alt` text is visually offset if images don’t load.
 */
img {
  font-style: italic;
}

/**
 * Give form elements some cursor interactions...
 */
label,
input,
textarea,
button,
select,
option {
  cursor: pointer;
}

.text-input:active,
.text-input:focus,
textarea:active,
textarea:focus {
  cursor: text;
  outline: none;
}

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
.cf:after, .gw:after,
.grid-wrapper:after {
  content: "";
  display: table;
  clear: both;
}

/*------------------------------------*\
    $SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
/**
 * Base elements
 */
/**
 * Objects and abstractions
 */
.media,
.island,
.islet {
  margin-bottom: 2em;
  margin-bottom: 1.14286rem;
}
.islet
.media, .islet
.island, .islet
.islet {
  margin-bottom: 1em;
  margin-bottom: 0.57143rem;
}

/**
 * Doubled up `margin-bottom` helper class.
 */
.landmark {
  margin-bottom: 4em;
  margin-bottom: 2.28571rem;
}

/**
 * Base styles; unclassed HTML elements etc.
 */
/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */
.lede,
.lead {
  font-size: 1.96875em;
  font-size: 1.125rem;
  line-height: 1.01587;
}

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * If English quotes are set in `_vars.scss`, define them here.
 */
/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */
/**
 * Inline quotes.
 */
q {
  quotes: "‘" "’" "“" "”";
}
q:before {
  content: "‘";
  content: open-quote;
}
q:after {
  content: "’";
  content: close-quote;
}
q q:before {
  content: "“";
  content: open-quote;
}
q q:after {
  content: "”";
  content: close-quote;
}

blockquote {
  quotes: "“" "”";
}
blockquote p:before {
  content: "“";
  content: open-quote;
}
blockquote p:after {
  content: "";
  content: no-close-quote;
}
blockquote p:last-of-type:after {
  content: "”";
  content: close-quote;
}
blockquote q:before {
  content: "‘";
  content: open-quote;
}
blockquote q:after {
  content: "’";
  content: close-quote;
}

/**
 *
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 *
 */
blockquote {
  /**
   * .4em is roughly equal to the width of the opening “ that we wish to hang.
   */
  text-indent: -0.41em;
}
blockquote p:last-of-type {
  margin-bottom: 0;
}

.source {
  display: block;
  text-indent: 0;
}
.source:before {
  content: "—";
}

/*------------------------------------*\
    $CODE
\*------------------------------------*/
/**
 * Use an explicit font stack to ensure browsers render correct `line-height`.
 */
pre {
  overflow: auto;
}

pre mark {
  background: none;
  border-bottom: 1px solid;
  color: inherit;
}

/**
 * Add comments to your code examples, e.g.:
 *
   <code>&lt;/div&gt;<span class=code-comment>&lt;!-- /wrapper --&gt;</span></code>
 *
 */
.code-comment {
  /**
   * Override this setting in your theme stylesheet
   */
  opacity: 0.75;
  filter: alpha(opacity=75);
}

/**
 * You can add line numbers to your code examples but be warned, it requires
 * some pretty funky looking markup, e.g.:
 *
   <ol class=line-numbers>
       <li><code>.nav{</code></li>
       <li><code>    list-style:none;</code></li>
       <li><code>    margin-left:0;</code></li>
       <li><code>}</code></li>
       <li><code>    .nav > li,</code></li>
       <li><code>        .nav > li > a{</code></li>
       <li><code>            display:inline-block;</code></li>
       <li><code>           *display:inline-block;</code></li>
       <li><code>            zoom:1;</code></li>
       <li><code>        }</code></li>
   </ol>
 *
 * 1. Make the list look like code.
 * 2. Give the list flush numbers with a leading zero.
 * 3. Make sure lines of code don’t wrap.
 * 4. Give the code form by forcing the `code` to honour white-space.
 */
.line-numbers {
  font-family: monospace, serif;
  /* [1] */
  list-style: decimal-leading-zero inside;
  /* [2] */
  white-space: nowrap;
  /* [3] */
  overflow: auto;
  /* [3] */
  margin-left: 0;
}

.line-numbers code {
  white-space: pre;
  /* [4] */
}

/*------------------------------------*\
    $IMAGES
\*------------------------------------*/
/**
 * Demo: jsfiddle.net/inuitcss/yMtur
 */
/**
 * Fluid images.
 */
img {
  max-width: 100%;
}

/**
 * Non-fluid images if you specify `width` and/or `height` attributes.
 */
img[width],
img[height] {
  max-width: none;
}

/**
 * Image placement variations.
 */
.img--right {
  float: right;
  margin-bottom: 2em;
  margin-left: 2em;
}

.img--left {
  float: left;
  margin-right: 2em;
  margin-bottom: 2em;
}

.img--center {
  display: block;
  margin-right: auto;
  margin-bottom: 2em;
  margin-left: auto;
}

/**
 * Keep your images on your baseline.
 *
 * Please note, these will not work too nicely with fluid images and will
 * distort when resized below a certain width. Use with caution.
 */
.img--short {
  height: 10em;
}

.img--medium {
  height: 20em;
}

.img--tall {
  height: 30em;
}

/**
 * Images in `figure` elements.
 */
figure > img {
  display: block;
}

/*------------------------------------*\
    $TABLES
\*------------------------------------*/
/**
 * We have a lot at our disposal for making very complex table constructs, e.g.:
 *
   <table class="table--bordered  table--striped  table--data">
       <colgroup>
           <col class=t10>
           <col class=t10>
           <col class=t10>
           <col>
       </colgroup>
       <thead>
           <tr>
               <th colspan=3>Foo</th>
               <th>Bar</th>
           </tr>
           <tr>
               <th>Lorem</th>
               <th>Ipsum</th>
               <th class=numerical>Dolor</th>
               <th>Sit</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <th rowspan=3>Sit</th>
               <td>Dolor</td>
               <td class=numerical>03.788</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>32.210</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>47.797</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <th rowspan=2>Sit</th>
               <td>Dolor</td>
               <td class=numerical>09.640</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>12.117</td>
               <td>Lorem</td>
           </tr>
       </tbody>
   </table>
 *
 */
table {
  width: 100%;
}

th,
td {
  padding: 0.5em;
  text-align: left;
}
@media screen and (min-width: 480px) {
  th,
  td {
    padding: 1em;
  }
}

/**
 * Cell alignments
 */
[colspan] {
  text-align: center;
}

[colspan="1"] {
  text-align: left;
}

[rowspan] {
  vertical-align: middle;
}

[rowspan="1"] {
  vertical-align: top;
}

.numerical {
  text-align: right;
}

/**
 * In the HTML above we see several `col` elements with classes whose numbers
 * represent a percentage width for that column. We leave one column free of a
 * class so that column can soak up the effects of any accidental breakage in
 * the table.
 */
.t5 {
  width: 5%;
}

.t10 {
  width: 10%;
}

.t12 {
  width: 12.5%;
}

/* 1/8 */
.t15 {
  width: 15%;
}

.t20 {
  width: 20%;
}

.t25 {
  width: 25%;
}

/* 1/4 */
.t30 {
  width: 30%;
}

.t33 {
  width: 33.333%;
}

/* 1/3 */
.t35 {
  width: 35%;
}

.t37 {
  width: 37.5%;
}

/* 3/8 */
.t40 {
  width: 40%;
}

.t45 {
  width: 45%;
}

.t50 {
  width: 50%;
}

/* 1/2 */
.t55 {
  width: 55%;
}

.t60 {
  width: 60%;
}

.t62 {
  width: 62.5%;
}

/* 5/8 */
.t65 {
  width: 65%;
}

.t66 {
  width: 66.666%;
}

/* 2/3 */
.t70 {
  width: 70%;
}

.t75 {
  width: 75%;
}

/* 3/4*/
.t80 {
  width: 80%;
}

.t85 {
  width: 85%;
}

.t87 {
  width: 87.5%;
}

/* 7/8 */
.t90 {
  width: 90%;
}

.t95 {
  width: 95%;
}

/**
 * Bordered tables
 */
.table--bordered th,
.table--bordered td {
  border: 1px solid #ccc;
  /* Override this color in your theme stylesheet */
}
.table--bordered th:empty,
.table--bordered td:empty {
  border: none;
}
.table--bordered thead tr:last-child th {
  border-bottom-width: 2px;
}
.table--bordered tbody tr th:last-of-type {
  border-right-width: 2px;
}

/**
 * Striped tables
 */
.table--striped tbody tr:nth-of-type(odd) {
  background-color: #ffc;
  /* Override this color in your theme stylesheet */
}

/**
 * Data table
 */
.table--data {
  font: 12px/1.5 sans-serif;
}

/**
 * Objects and abstractions
 *
 * Single-line comment (//) out any objects you do not need in your project.
 */
/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
   <div class=gw>

       <div class="g  one-third">
           <p>One third grid</p>
       </div>

       <div class="g  two-thirds">
           <p>Two thirds grid</p>
       </div>

       <div class="g  one-half">
           <p>One half grid</p>
       </div>

       <div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>

       <div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>

   </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */
/**
 * Grid wrapper
 *
 * Shorthand and verbose
 */
.gw,
.grid-wrapper {
  /**
   * Negative margin to negate the padding on the first grid child.
   */
  margin-left: -2em;
  /**
   * The following declarations allow us to use the `.gw` class on lists.
   */
  list-style: none;
  margin-bottom: 0;
}
@media (max-width: 65em) {
  .gw,
  .grid-wrapper {
    margin-left: -1em;
  }
}

/**
 * Reverse grid order
 *
   <div class="gw  gw--rev">

       <div class="g  one-third">
           <p>Appears on the right</p>
       </div>

       <div class="g  two-thirds">
           <p>Appears on the left</p>
       </div>

   </div>
 *
 */
.gw--rev > .g,
.grid-wrapper--rev > .grid {
  float: right;
}

/**
 * Very infrequently occuring grid wrappers as children of grid wrappers.
 */
.gw > .gw,
.grid-wrapper > .grid-wrapper {
  margin-left: 0;
}

/**
 * Grid
 *
 * Shorthand and verbose
 */
.g,
.g-r,
.grid {
  float: left;
  padding-left: 2em;
}
@media (max-width: 65em) {
  .g,
  .g-r,
  .grid {
    padding-left: 1em;
  }
}

/**
 * Style trumps; helper and brand classes
 */
/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */
/**
* Whole
*/
.one-whole {
  width: 100%;
}

/**
* Halves
*/
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%;
}

/**
* Thirds
*/
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%;
}

.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%;
}

/**
* Quarters
*/
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%;
}

.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%;
}

/**
* Fifths
*/
.one-fifth, .two-tenths {
  width: 20%;
}

.two-fifths, .four-tenths {
  width: 40%;
}

.three-fifths, .six-tenths {
  width: 60%;
}

.four-fifths, .eight-tenths {
  width: 80%;
}

/**
* Sixths
*/
.one-sixth, .two-twelfths {
  width: 16.666%;
}

.five-sixths, .ten-twelfths {
  width: 83.333%;
}

/**
* Eighths
*/
.one-eighth {
  width: 12.5%;
}

.three-eighths {
  width: 37.5%;
}

.five-eighths {
  width: 62.5%;
}

.seven-eighths {
  width: 87.5%;
}

/**
* Tenths
*/
.one-tenth {
  width: 10%;
}

.three-tenths {
  width: 30%;
}

.seven-tenths {
  width: 70%;
}

.nine-tenths {
  width: 90%;
}

/**
* Twelfths
*/
.one-twelfth {
  width: 8.333%;
}

.five-twelfths {
  width: 41.666%;
}

.seven-twelfths {
  width: 58.333%;
}

.eleven-twelfths {
  width: 91.666%;
}

/**
 * If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoint you’d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
 *
 * This would create a `div` that, at ‘desktop’ sizes, takes up a quarter of the
 * horizontal space, a half of that space at ‘tablet’ sizes, and goes full width
 * at ‘mobile’ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */
@media (max-width: 44em) {
  /**
  * Whole
  */
  .small-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .small-one-half, .small-two-quarters, .small-three-sixths, .small-four-eighths, .small-five-tenths, .small-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  .small-one-third, .small-two-sixths, .small-four-twelfths {
    width: 33.333%;
  }

  .small-two-thirds, .small-four-sixths, .small-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .small-one-quarter, .small-two-eighths, .small-three-twelfths {
    width: 25%;
  }

  .small-three-quarters, .small-six-eighths, .small-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .small-one-fifth, .small-two-tenths {
    width: 20%;
  }

  .small-two-fifths, .small-four-tenths {
    width: 40%;
  }

  .small-three-fifths, .small-six-tenths {
    width: 60%;
  }

  .small-four-fifths, .small-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .small-one-sixth, .small-two-twelfths {
    width: 16.666%;
  }

  .small-five-sixths, .small-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .small-one-eighth {
    width: 12.5%;
  }

  .small-three-eighths {
    width: 37.5%;
  }

  .small-five-eighths {
    width: 62.5%;
  }

  .small-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .small-one-tenth {
    width: 10%;
  }

  .small-three-tenths {
    width: 30%;
  }

  .small-seven-tenths {
    width: 70%;
  }

  .small-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .small-one-twelfth {
    width: 8.333%;
  }

  .small-five-twelfths {
    width: 41.666%;
  }

  .small-seven-twelfths {
    width: 58.333%;
  }

  .small-eleven-twelfths {
    width: 91.666%;
  }
}
@media (max-width: 65em) {
  /**
  * Whole
  */
  .medium-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .medium-one-half, .medium-two-quarters, .medium-three-sixths, .medium-four-eighths, .medium-five-tenths, .medium-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  .medium-one-third, .medium-two-sixths, .medium-four-twelfths {
    width: 33.333%;
  }

  .medium-two-thirds, .medium-four-sixths, .medium-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .medium-one-quarter, .medium-two-eighths, .medium-three-twelfths {
    width: 25%;
  }

  .medium-three-quarters, .medium-six-eighths, .medium-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .medium-one-fifth, .medium-two-tenths {
    width: 20%;
  }

  .medium-two-fifths, .medium-four-tenths {
    width: 40%;
  }

  .medium-three-fifths, .medium-six-tenths {
    width: 60%;
  }

  .medium-four-fifths, .medium-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .medium-one-sixth, .medium-two-twelfths {
    width: 16.666%;
  }

  .medium-five-sixths, .medium-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .medium-one-eighth {
    width: 12.5%;
  }

  .medium-three-eighths {
    width: 37.5%;
  }

  .medium-five-eighths {
    width: 62.5%;
  }

  .medium-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .medium-one-tenth {
    width: 10%;
  }

  .medium-three-tenths {
    width: 30%;
  }

  .medium-seven-tenths {
    width: 70%;
  }

  .medium-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .medium-one-twelfth {
    width: 8.333%;
  }

  .medium-five-twelfths {
    width: 41.666%;
  }

  .medium-seven-twelfths {
    width: 58.333%;
  }

  .medium-eleven-twelfths {
    width: 91.666%;
  }
}
@media (min-width: 65em) {
  /**
  * Whole
  */
  .large-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .large-one-half, .large-two-quarters, .large-three-sixths, .large-four-eighths, .large-five-tenths, .large-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  .large-one-third, .large-two-sixths, .large-four-twelfths {
    width: 33.333%;
  }

  .large-two-thirds, .large-four-sixths, .large-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .large-one-quarter, .large-two-eighths, .large-three-twelfths {
    width: 25%;
  }

  .large-three-quarters, .large-six-eighths, .large-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .large-one-fifth, .large-two-tenths {
    width: 20%;
  }

  .large-two-fifths, .large-four-tenths {
    width: 40%;
  }

  .large-three-fifths, .large-six-tenths {
    width: 60%;
  }

  .large-four-fifths, .large-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .large-one-sixth, .large-two-twelfths {
    width: 16.666%;
  }

  .large-five-sixths, .large-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .large-one-eighth {
    width: 12.5%;
  }

  .large-three-eighths {
    width: 37.5%;
  }

  .large-five-eighths {
    width: 62.5%;
  }

  .large-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .large-one-tenth {
    width: 10%;
  }

  .large-three-tenths {
    width: 30%;
  }

  .large-seven-tenths {
    width: 70%;
  }

  .large-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .large-one-twelfth {
    width: 8.333%;
  }

  .large-five-twelfths {
    width: 41.666%;
  }

  .large-seven-twelfths {
    width: 58.333%;
  }

  .large-eleven-twelfths {
    width: 91.666%;
  }
}
/**
 * If you have set the additional `$responsive-extra` variable to ‘true’ in
 * `_vars.scss` then you now have access to the following class available to
 * accomodate much larger screen resolutions.
 */
/* endif */
/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
.float--right {
  float: right!important;
}

.float--left {
  float: left !important;
}

.text--left {
  text-align: left  !important;
}

.text--center {
  text-align: center;
}

.text--right {
  text-align: right !important;
}

.flush {
  margin: 0!important;
}

.flush--top {
  margin-top: 0!important;
}

.flush--right {
  margin-right: 0!important;
}

.flush--bottom {
  margin-bottom: 0!important;
}

.flush--left {
  margin-left: 0!important;
}

.flush--ends {
  margin-top: 0!important;
  margin-bottom: 0!important;
}

.flush--sides {
  margin-right: 0!important;
  margin-left: 0!important;
}

/**
 * Pull items full width of `.island` parents.
 */
.full-bleed {
  margin-right: -2em !important;
  margin-left: -2em !important;
}
.islet .full-bleed {
  margin-right: -1em !important;
  margin-left: -1em !important;
}

/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
.informative {
  cursor: help;
}

/**
 * Mute an object by reducing its opacity.
 */
.muted {
  opacity: 0.5;
  filter: alpha(opacity=50);
}

/**
 * Align items to the right where they imply progression/movement forward, e.g.:
 *
   <p class=proceed><a href=#>Read more...</a></p>
 *
 */
.proceed {
  text-align: right;
}

/**
 * Add a right-angled quote to links that imply movement, e.g.:
 *
   <a href=# class=go>Read more</a>
 *
 */
.go:after {
  content: " »";
}

/**
 * Apply capital case to an element (usually a `strong`).
 */
.caps {
  text-transform: uppercase;
}

/**
 * Hide content off-screen without resorting to `display:none;`
 */
.accessibility {
  position: absolute;
  left: -999em;
}

[dir=rtl] .accessibility {
  left: auto;
  right: -999em;
}

/**
 * Hide content based on breakpoint
 */
.hide {
  position: absolute;
  left: -999em;
}

/* endif */
/*
 * Import 
 */
/**
 * okaidia theme for JavaScript, CSS and HTML
 * Loosely based on Monokai textmate theme by http://www.monokai.nl/
 * @author ocodia
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #f8f8f2;
  text-shadow: 0 1px rgba(0, 0, 0, 0.3);
  font-family: Consolas, Monaco, 'Andale Mono', monospace;
  direction: ltr;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: 1em;
  margin: .5em 0;
  overflow: auto;
  border-radius: 0.3em;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
  background: #272822;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: slategray;
}

.token.punctuation {
  color: #f8f8f2;
}

.namespace {
  opacity: .7;
}

.token.property,
.token.tag {
  color: #f92672;
}

.token.boolean,
.token.number {
  color: #ae81ff;
}

.token.selector,
.token.attr-name,
.token.string {
  color: #a6e22e;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: #f8f8f2;
}

.token.atrule,
.token.attr-value {
  color: #e6db74;
}

.token.keyword {
  color: #66d9ef;
}

.token.regex,
.token.important {
  color: #fd971f;
}

.token.important {
  font-weight: bold;
}

.token.entity {
  cursor: help;
}

@font-face {
  font-family: 'Ubuntu';
  font-style: normal;
  font-weight: 400;
  src: local("Ubuntu"), url(http://themes.googleusercontent.com/static/fonts/ubuntu/v4/_xyN3apAT_yRRDeqB3sPRg.woff) format("woff");
}

@font-face {
  font-family: 'Ubuntu';
  font-style: normal;
  font-weight: 500;
  src: local("Ubuntu Medium"), local("Ubuntu-Medium"), url(http://themes.googleusercontent.com/static/fonts/ubuntu/v4/OsJ2DjdpjqFRVUSto6IffD8E0i7KZn-EPnyo3HZu7kw.woff) format("woff");
}

@font-face {
  font-family: 'Ubuntu';
  font-style: normal;
  font-weight: 700;
  src: local("Ubuntu Bold"), local("Ubuntu-Bold"), url(http://themes.googleusercontent.com/static/fonts/ubuntu/v4/0ihfXUL2emPh0ROJezvraD8E0i7KZn-EPnyo3HZu7kw.woff) format("woff");
}

/**
 * 
 * Colors 
 * 
 */
/**
 * 
 * Units 
 * 
 */
/**
 * 
 * Modifier 
 * 
 */
.g-r button,
.g-r input {
  margin: 25% 25%;
}

ul {
  margin-top: 1.075em;
  margin-bottom: 2.15em;
}

h2 {
  margin-top: 2.15em;
  margin-bottom: 1.075em;
}

pre[class*="language-"] {
  margin-top: 1.22857em;
  margin-bottom: 1.075em;
}

.emw__element-alpha, pre[class*="language-"].emw__element-delta {
  margin-bottom: 2.15em !important;
}

nav a, button {
  background: #e74c3c;
  color: white;
  padding: 0.5em;
  display: inline-block;
  width: 100%;
}

/**
 * 
 * Elements 
 * 
 */
/**
 * 
 * Mixins 
 * 
 */
/*
 * Colors
 */
/*
 * Basic styles for the ribbon__modifiers
 */
.ribbon {
  color: white;
  background: #e74c3c;
  -webkit-transition: color 0.25s ease-in, background 0.25s ease-in;
  -moz-transition: color 0.25s ease-in, background 0.25s ease-in;
  -o-transition: color 0.25s ease-in, background 0.25s ease-in;
  transition: color 0.25s ease-in, background 0.25s ease-in;
}
.ribbon:hover {
  color: #e74c3c;
  background: white;
}

/* 
 * GitHub ribbon base class
 */
.ribbon {
  position: absolute;
  padding: 0.5em;
  text-decoration: none;
  /* 
   * Position of the ribbon
   */
}
.ribbon.ribbon--top-left {
  top: 0.95em;
  left: 0.75em;
}
.ribbon.ribbon--top-right {
  top: 0.95em;
  right: -0.75em;
  padding-right: 1.5em;
}
.ribbon.ribbon--bottom-left {
  bottom: 0.95em;
  left: 0.75em;
}
.ribbon.ribbon--bottom-right {
  bottom: 0.95em;
  right: -0.75em;
  padding-right: 1.5em;
}

* {
  margin: 0;
  padding: 0;
}

body {
  font: 1.05em "Ubuntu", sans-serif;
  line-height: 1.6275em;
  background: white;
  color: black;
  margin: 0 auto;
  padding-top: 8.9225em;
  padding-bottom: 2.15em;
  overflow-x: hidden;
  padding-left: 15%;
  padding-right: 15%;
}
@media (max-width: 44em) {
  body {
    padding-left: 0.5em;
    padding-right: 0.5em;
  }
}
@media (max-width: 65em) {
  body {
    padding-left: 0.5em;
    padding-right: 0.5em;
  }
}
@media (max-width: 44em) {
  body {
    font-size: 1.075em;
  }
}
@media (max-width: 65em) {
  body {
    font-size: 1.075em;
  }
}

h1 {
  font-size: 3.1175em;
  margin-bottom: 0;
}
@media (max-width: 65em) {
  h1 {
    font-size: 2.04762em;
    margin-bottom: 0.08333em;
  }
}

a {
  color: #e74c3c;
  text-decoration: none;
  padding: .25em;
  -webkit-transition: color 0.25s ease-in, background 0.25s ease-in;
  -moz-transition: color 0.25s ease-in, background 0.25s ease-in;
  -o-transition: color 0.25s ease-in, background 0.25s ease-in;
  transition: color 0.25s ease-in, background 0.25s ease-in;
}
a:hover {
  text-decoration: none;
  background: #e74c3c;
  color: white;
}

ul {
  margin-left: 1.05em;
}

pre[class*="language-"] {
  border-radius: 0;
}

nav {
  position: fixed;
  top: 0;
  left: 0;
  padding: 0;
  width: 100%;
  background: white;
  padding-left: 15%;
  padding-right: 15%;
}
nav ul {
  list-style: none;
  margin: 0;
}
nav ul li {
  text-align: center;
}
@media (max-width: 65em) {
  nav ul {
    margin-top: 0;
  }
  nav ul li {
    padding: 0;
    margin: 0;
  }
}
nav a:hover {
  background: white;
  color: #e74c3c;
}
@media (max-width: 44em) {
  nav {
    padding-left: 1.05em;
    padding-right: 1.05em;
  }
}
@media (max-width: 65em) {
  nav {
    padding-left: 1.05em;
    padding-right: 1.05em;
  }
}
@media (max-width: 65em) {
  nav {
    z-index: 1337;
    padding: 0;
  }
  nav.gw {
    margin-left: 0;
    margin-right: 0;
  }
  nav > .g {
    padding-left: 0;
    width: 50%;
  }
  nav > .g.medium-one-whole {
    width: 100%;
  }
  nav > .g.medium-one-half, nav > .g.medium-two-quarters, nav > .g.medium-three-sixths, nav > .g.medium-four-eighths, nav > .g.medium-five-tenths, nav > .g.medium-six-twelfths {
    width: 25%;
  }
}

button {
  border: none;
  float: right;
  width: 100%;
}

label {
  display: inline-block;
}

input {
  width: 100%;
  padding: 0.13438em 0.26875em;
  font-size: 2.15em;
  line-height: 2.15em;
}

/*
 * Footer
 */
footer {
  border-top: 0.5em solid #e74c3c;
  padding: 0.5em 0;
}
